// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/iqbalnzls/watchcommerce/src/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrderDetailsRepositoryIFaceMock is an autogenerated mock type for the OrderDetailsRepositoryIFace type
type OrderDetailsRepositoryIFaceMock struct {
	mock.Mock
}

// GetByOrderID provides a mock function with given fields: orderID
func (_m *OrderDetailsRepositoryIFaceMock) GetByOrderID(orderID int64) ([]*domain.OrderDetails, error) {
	ret := _m.Called(orderID)

	var r0 []*domain.OrderDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*domain.OrderDetails, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*domain.OrderDetails); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.OrderDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBulkWithDBTrx provides a mock function with given fields: tx, orderID, domains
func (_m *OrderDetailsRepositoryIFaceMock) SaveBulkWithDBTrx(tx *sql.Tx, orderID int64, domains []domain.OrderDetails) error {
	ret := _m.Called(tx, orderID, domains)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, []domain.OrderDetails) error); ok {
		r0 = rf(tx, orderID, domains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderDetailsRepositoryIFaceMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderDetailsRepositoryIFaceMock creates a new instance of OrderDetailsRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderDetailsRepositoryIFaceMock(t mockConstructorTestingTNewOrderDetailsRepositoryIFaceMock) *OrderDetailsRepositoryIFaceMock {
	mock := &OrderDetailsRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
