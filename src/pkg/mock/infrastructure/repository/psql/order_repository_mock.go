// Code generated by mockery v2.13.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	order "github.com/iqbalnzls/watchcommerce/src/domain/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepositoryIFaceMock is an autogenerated mock type for the OrderRepositoryIFace type
type OrderRepositoryIFaceMock struct {
	mock.Mock
}

// BeginDBTrx provides a mock function with given fields:
func (_m *OrderRepositoryIFaceMock) BeginDBTrx() (*sql.Tx, error) {
	ret := _m.Called()

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitDBTrx provides a mock function with given fields: tx
func (_m *OrderRepositoryIFaceMock) CommitDBTrx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *OrderRepositoryIFaceMock) Get(id int64) (*order.Order, error) {
	ret := _m.Called(id)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(int64) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackDBTrx provides a mock function with given fields: tx
func (_m *OrderRepositoryIFaceMock) RollbackDBTrx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWithDBTrx provides a mock function with given fields: tx, domain
func (_m *OrderRepositoryIFaceMock) SaveWithDBTrx(tx *sql.Tx, domain *order.Order) (int64, error) {
	ret := _m.Called(tx, domain)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*sql.Tx, *order.Order) int64); ok {
		r0 = rf(tx, domain)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, *order.Order) error); ok {
		r1 = rf(tx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewOrderRepositoryIFaceMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepositoryIFaceMock creates a new instance of OrderRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepositoryIFaceMock(t NewOrderRepositoryIFaceMockT) *OrderRepositoryIFaceMock {
	mock := &OrderRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
