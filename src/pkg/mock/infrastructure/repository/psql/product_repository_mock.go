// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/iqbalnzls/watchcommerce/src/domain"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// ProductRepositoryIFaceMock is an autogenerated mock type for the ProductRepositoryIFace type
type ProductRepositoryIFaceMock struct {
	mock.Mock
}

// GetByBrandID provides a mock function with given fields: brandID
func (_m *ProductRepositoryIFaceMock) GetByBrandID(brandID int64) ([]*domain.Product, error) {
	ret := _m.Called(brandID)

	var r0 []*domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*domain.Product, error)); ok {
		return rf(brandID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*domain.Product); ok {
		r0 = rf(brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(brandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProductRepositoryIFaceMock) GetByID(id int64) (*domain.Product, error) {
	ret := _m.Called(id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *ProductRepositoryIFaceMock) Save(_a0 *domain.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByQuantityWithDBTrx provides a mock function with given fields: tx, id, quantity
func (_m *ProductRepositoryIFaceMock) UpdateByQuantityWithDBTrx(tx *sql.Tx, id int64, quantity int64) error {
	ret := _m.Called(tx, id, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) error); ok {
		r0 = rf(tx, id, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepositoryIFaceMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepositoryIFaceMock creates a new instance of ProductRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepositoryIFaceMock(t mockConstructorTestingTNewProductRepositoryIFaceMock) *ProductRepositoryIFaceMock {
	mock := &ProductRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
