// Code generated by mockery v2.13.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	product "github.com/iqbalnzls/watchcommerce/src/domain/product"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepositoryIFaceMock is an autogenerated mock type for the ProductRepositoryIFace type
type ProductRepositoryIFaceMock struct {
	mock.Mock
}

// GetByBrandID provides a mock function with given fields: brandID
func (_m *ProductRepositoryIFaceMock) GetByBrandID(brandID int64) ([]*product.Product, error) {
	ret := _m.Called(brandID)

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func(int64) []*product.Product); ok {
		r0 = rf(brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(brandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProductRepositoryIFaceMock) GetByID(id int64) (*product.Product, error) {
	ret := _m.Called(id)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(int64) *product.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: domain
func (_m *ProductRepositoryIFaceMock) Save(domain *product.Product) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product.Product) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByQuantityWithDBTrx provides a mock function with given fields: tx, id, quantity
func (_m *ProductRepositoryIFaceMock) UpdateByQuantityWithDBTrx(tx *sql.Tx, id int64, quantity int64) error {
	ret := _m.Called(tx, id, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) error); ok {
		r0 = rf(tx, id, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
