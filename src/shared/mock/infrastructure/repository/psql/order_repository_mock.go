// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/iqbalnzls/watchcommerce/src/domain"
	app_context "github.com/iqbalnzls/watchcommerce/src/shared/app_context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrderRepositoryIFaceMock is an autogenerated mock type for the RepositoryIFace type
type OrderRepositoryIFaceMock struct {
	mock.Mock
}

type OrderRepositoryIFaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepositoryIFaceMock) EXPECT() *OrderRepositoryIFaceMock_Expecter {
	return &OrderRepositoryIFaceMock_Expecter{mock: &_m.Mock}
}

// BeginDBTrx provides a mock function with no fields
func (_m *OrderRepositoryIFaceMock) BeginDBTrx() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginDBTrx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryIFaceMock_BeginDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginDBTrx'
type OrderRepositoryIFaceMock_BeginDBTrx_Call struct {
	*mock.Call
}

// BeginDBTrx is a helper method to define mock.On call
func (_e *OrderRepositoryIFaceMock_Expecter) BeginDBTrx() *OrderRepositoryIFaceMock_BeginDBTrx_Call {
	return &OrderRepositoryIFaceMock_BeginDBTrx_Call{Call: _e.mock.On("BeginDBTrx")}
}

func (_c *OrderRepositoryIFaceMock_BeginDBTrx_Call) Run(run func()) *OrderRepositoryIFaceMock_BeginDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderRepositoryIFaceMock_BeginDBTrx_Call) Return(tx *sql.Tx, err error) *OrderRepositoryIFaceMock_BeginDBTrx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *OrderRepositoryIFaceMock_BeginDBTrx_Call) RunAndReturn(run func() (*sql.Tx, error)) *OrderRepositoryIFaceMock_BeginDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// CommitDBTrx provides a mock function with given fields: appCtx, tx
func (_m *OrderRepositoryIFaceMock) CommitDBTrx(appCtx *app_context.AppContext, tx *sql.Tx) error {
	ret := _m.Called(appCtx, tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitDBTrx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx) error); ok {
		r0 = rf(appCtx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryIFaceMock_CommitDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitDBTrx'
type OrderRepositoryIFaceMock_CommitDBTrx_Call struct {
	*mock.Call
}

// CommitDBTrx is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - tx *sql.Tx
func (_e *OrderRepositoryIFaceMock_Expecter) CommitDBTrx(appCtx interface{}, tx interface{}) *OrderRepositoryIFaceMock_CommitDBTrx_Call {
	return &OrderRepositoryIFaceMock_CommitDBTrx_Call{Call: _e.mock.On("CommitDBTrx", appCtx, tx)}
}

func (_c *OrderRepositoryIFaceMock_CommitDBTrx_Call) Run(run func(appCtx *app_context.AppContext, tx *sql.Tx)) *OrderRepositoryIFaceMock_CommitDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*sql.Tx))
	})
	return _c
}

func (_c *OrderRepositoryIFaceMock_CommitDBTrx_Call) Return(err error) *OrderRepositoryIFaceMock_CommitDBTrx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderRepositoryIFaceMock_CommitDBTrx_Call) RunAndReturn(run func(*app_context.AppContext, *sql.Tx) error) *OrderRepositoryIFaceMock_CommitDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: appCtx, id
func (_m *OrderRepositoryIFaceMock) Get(appCtx *app_context.AppContext, id int64) (*domain.Order, error) {
	ret := _m.Called(appCtx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) (*domain.Order, error)); ok {
		return rf(appCtx, id)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) *domain.Order); ok {
		r0 = rf(appCtx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, int64) error); ok {
		r1 = rf(appCtx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryIFaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepositoryIFaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - id int64
func (_e *OrderRepositoryIFaceMock_Expecter) Get(appCtx interface{}, id interface{}) *OrderRepositoryIFaceMock_Get_Call {
	return &OrderRepositoryIFaceMock_Get_Call{Call: _e.mock.On("Get", appCtx, id)}
}

func (_c *OrderRepositoryIFaceMock_Get_Call) Run(run func(appCtx *app_context.AppContext, id int64)) *OrderRepositoryIFaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(int64))
	})
	return _c
}

func (_c *OrderRepositoryIFaceMock_Get_Call) Return(_a0 *domain.Order, err error) *OrderRepositoryIFaceMock_Get_Call {
	_c.Call.Return(_a0, err)
	return _c
}

func (_c *OrderRepositoryIFaceMock_Get_Call) RunAndReturn(run func(*app_context.AppContext, int64) (*domain.Order, error)) *OrderRepositoryIFaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackDBTrx provides a mock function with given fields: appCtx, tx
func (_m *OrderRepositoryIFaceMock) RollbackDBTrx(appCtx *app_context.AppContext, tx *sql.Tx) error {
	ret := _m.Called(appCtx, tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackDBTrx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx) error); ok {
		r0 = rf(appCtx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryIFaceMock_RollbackDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackDBTrx'
type OrderRepositoryIFaceMock_RollbackDBTrx_Call struct {
	*mock.Call
}

// RollbackDBTrx is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - tx *sql.Tx
func (_e *OrderRepositoryIFaceMock_Expecter) RollbackDBTrx(appCtx interface{}, tx interface{}) *OrderRepositoryIFaceMock_RollbackDBTrx_Call {
	return &OrderRepositoryIFaceMock_RollbackDBTrx_Call{Call: _e.mock.On("RollbackDBTrx", appCtx, tx)}
}

func (_c *OrderRepositoryIFaceMock_RollbackDBTrx_Call) Run(run func(appCtx *app_context.AppContext, tx *sql.Tx)) *OrderRepositoryIFaceMock_RollbackDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*sql.Tx))
	})
	return _c
}

func (_c *OrderRepositoryIFaceMock_RollbackDBTrx_Call) Return(err error) *OrderRepositoryIFaceMock_RollbackDBTrx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderRepositoryIFaceMock_RollbackDBTrx_Call) RunAndReturn(run func(*app_context.AppContext, *sql.Tx) error) *OrderRepositoryIFaceMock_RollbackDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// SaveWithDBTrx provides a mock function with given fields: appCtx, tx, _a2
func (_m *OrderRepositoryIFaceMock) SaveWithDBTrx(appCtx *app_context.AppContext, tx *sql.Tx, _a2 *domain.Order) (int64, error) {
	ret := _m.Called(appCtx, tx, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SaveWithDBTrx")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx, *domain.Order) (int64, error)); ok {
		return rf(appCtx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx, *domain.Order) int64); ok {
		r0 = rf(appCtx, tx, _a2)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, *sql.Tx, *domain.Order) error); ok {
		r1 = rf(appCtx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryIFaceMock_SaveWithDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWithDBTrx'
type OrderRepositoryIFaceMock_SaveWithDBTrx_Call struct {
	*mock.Call
}

// SaveWithDBTrx is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - tx *sql.Tx
//   - _a2 *domain.Order
func (_e *OrderRepositoryIFaceMock_Expecter) SaveWithDBTrx(appCtx interface{}, tx interface{}, _a2 interface{}) *OrderRepositoryIFaceMock_SaveWithDBTrx_Call {
	return &OrderRepositoryIFaceMock_SaveWithDBTrx_Call{Call: _e.mock.On("SaveWithDBTrx", appCtx, tx, _a2)}
}

func (_c *OrderRepositoryIFaceMock_SaveWithDBTrx_Call) Run(run func(appCtx *app_context.AppContext, tx *sql.Tx, _a2 *domain.Order)) *OrderRepositoryIFaceMock_SaveWithDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*sql.Tx), args[2].(*domain.Order))
	})
	return _c
}

func (_c *OrderRepositoryIFaceMock_SaveWithDBTrx_Call) Return(id int64, err error) *OrderRepositoryIFaceMock_SaveWithDBTrx_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *OrderRepositoryIFaceMock_SaveWithDBTrx_Call) RunAndReturn(run func(*app_context.AppContext, *sql.Tx, *domain.Order) (int64, error)) *OrderRepositoryIFaceMock_SaveWithDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepositoryIFaceMock creates a new instance of OrderRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryIFaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryIFaceMock {
	mock := &OrderRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
