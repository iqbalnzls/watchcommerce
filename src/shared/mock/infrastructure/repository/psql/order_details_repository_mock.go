// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/iqbalnzls/watchcommerce/src/domain"
	app_context "github.com/iqbalnzls/watchcommerce/src/shared/app_context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrderDetailsRepositoryIFaceMock is an autogenerated mock type for the RepositoryIFace type
type OrderDetailsRepositoryIFaceMock struct {
	mock.Mock
}

type OrderDetailsRepositoryIFaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderDetailsRepositoryIFaceMock) EXPECT() *OrderDetailsRepositoryIFaceMock_Expecter {
	return &OrderDetailsRepositoryIFaceMock_Expecter{mock: &_m.Mock}
}

// GetByOrderID provides a mock function with given fields: appCtx, orderID
func (_m *OrderDetailsRepositoryIFaceMock) GetByOrderID(appCtx *app_context.AppContext, orderID int64) ([]*domain.OrderDetails, error) {
	ret := _m.Called(appCtx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrderID")
	}

	var r0 []*domain.OrderDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) ([]*domain.OrderDetails, error)); ok {
		return rf(appCtx, orderID)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) []*domain.OrderDetails); ok {
		r0 = rf(appCtx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.OrderDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, int64) error); ok {
		r1 = rf(appCtx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderDetailsRepositoryIFaceMock_GetByOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrderID'
type OrderDetailsRepositoryIFaceMock_GetByOrderID_Call struct {
	*mock.Call
}

// GetByOrderID is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - orderID int64
func (_e *OrderDetailsRepositoryIFaceMock_Expecter) GetByOrderID(appCtx interface{}, orderID interface{}) *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call {
	return &OrderDetailsRepositoryIFaceMock_GetByOrderID_Call{Call: _e.mock.On("GetByOrderID", appCtx, orderID)}
}

func (_c *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call) Run(run func(appCtx *app_context.AppContext, orderID int64)) *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(int64))
	})
	return _c
}

func (_c *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call) Return(domains []*domain.OrderDetails, err error) *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call {
	_c.Call.Return(domains, err)
	return _c
}

func (_c *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call) RunAndReturn(run func(*app_context.AppContext, int64) ([]*domain.OrderDetails, error)) *OrderDetailsRepositoryIFaceMock_GetByOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBulkWithDBTrx provides a mock function with given fields: appCtx, tx, orderID, domains
func (_m *OrderDetailsRepositoryIFaceMock) SaveBulkWithDBTrx(appCtx *app_context.AppContext, tx *sql.Tx, orderID int64, domains []domain.OrderDetails) error {
	ret := _m.Called(appCtx, tx, orderID, domains)

	if len(ret) == 0 {
		panic("no return value specified for SaveBulkWithDBTrx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx, int64, []domain.OrderDetails) error); ok {
		r0 = rf(appCtx, tx, orderID, domains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBulkWithDBTrx'
type OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call struct {
	*mock.Call
}

// SaveBulkWithDBTrx is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - tx *sql.Tx
//   - orderID int64
//   - domains []domain.OrderDetails
func (_e *OrderDetailsRepositoryIFaceMock_Expecter) SaveBulkWithDBTrx(appCtx interface{}, tx interface{}, orderID interface{}, domains interface{}) *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call {
	return &OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call{Call: _e.mock.On("SaveBulkWithDBTrx", appCtx, tx, orderID, domains)}
}

func (_c *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call) Run(run func(appCtx *app_context.AppContext, tx *sql.Tx, orderID int64, domains []domain.OrderDetails)) *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*sql.Tx), args[2].(int64), args[3].([]domain.OrderDetails))
	})
	return _c
}

func (_c *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call) Return(err error) *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call) RunAndReturn(run func(*app_context.AppContext, *sql.Tx, int64, []domain.OrderDetails) error) *OrderDetailsRepositoryIFaceMock_SaveBulkWithDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderDetailsRepositoryIFaceMock creates a new instance of OrderDetailsRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderDetailsRepositoryIFaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderDetailsRepositoryIFaceMock {
	mock := &OrderDetailsRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
