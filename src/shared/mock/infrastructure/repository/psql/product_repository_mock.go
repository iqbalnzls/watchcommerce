// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/iqbalnzls/watchcommerce/src/domain"
	app_context "github.com/iqbalnzls/watchcommerce/src/shared/app_context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// ProductRepositoryIFaceMock is an autogenerated mock type for the RepositoryIFace type
type ProductRepositoryIFaceMock struct {
	mock.Mock
}

type ProductRepositoryIFaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepositoryIFaceMock) EXPECT() *ProductRepositoryIFaceMock_Expecter {
	return &ProductRepositoryIFaceMock_Expecter{mock: &_m.Mock}
}

// GetByBrandID provides a mock function with given fields: appCtx, brandID
func (_m *ProductRepositoryIFaceMock) GetByBrandID(appCtx *app_context.AppContext, brandID int64) ([]*domain.Product, error) {
	ret := _m.Called(appCtx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetByBrandID")
	}

	var r0 []*domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) ([]*domain.Product, error)); ok {
		return rf(appCtx, brandID)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) []*domain.Product); ok {
		r0 = rf(appCtx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, int64) error); ok {
		r1 = rf(appCtx, brandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepositoryIFaceMock_GetByBrandID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBrandID'
type ProductRepositoryIFaceMock_GetByBrandID_Call struct {
	*mock.Call
}

// GetByBrandID is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - brandID int64
func (_e *ProductRepositoryIFaceMock_Expecter) GetByBrandID(appCtx interface{}, brandID interface{}) *ProductRepositoryIFaceMock_GetByBrandID_Call {
	return &ProductRepositoryIFaceMock_GetByBrandID_Call{Call: _e.mock.On("GetByBrandID", appCtx, brandID)}
}

func (_c *ProductRepositoryIFaceMock_GetByBrandID_Call) Run(run func(appCtx *app_context.AppContext, brandID int64)) *ProductRepositoryIFaceMock_GetByBrandID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(int64))
	})
	return _c
}

func (_c *ProductRepositoryIFaceMock_GetByBrandID_Call) Return(domains []*domain.Product, err error) *ProductRepositoryIFaceMock_GetByBrandID_Call {
	_c.Call.Return(domains, err)
	return _c
}

func (_c *ProductRepositoryIFaceMock_GetByBrandID_Call) RunAndReturn(run func(*app_context.AppContext, int64) ([]*domain.Product, error)) *ProductRepositoryIFaceMock_GetByBrandID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: appCtx, id
func (_m *ProductRepositoryIFaceMock) GetByID(appCtx *app_context.AppContext, id int64) (*domain.Product, error) {
	ret := _m.Called(appCtx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) (*domain.Product, error)); ok {
		return rf(appCtx, id)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int64) *domain.Product); ok {
		r0 = rf(appCtx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, int64) error); ok {
		r1 = rf(appCtx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepositoryIFaceMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProductRepositoryIFaceMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - id int64
func (_e *ProductRepositoryIFaceMock_Expecter) GetByID(appCtx interface{}, id interface{}) *ProductRepositoryIFaceMock_GetByID_Call {
	return &ProductRepositoryIFaceMock_GetByID_Call{Call: _e.mock.On("GetByID", appCtx, id)}
}

func (_c *ProductRepositoryIFaceMock_GetByID_Call) Run(run func(appCtx *app_context.AppContext, id int64)) *ProductRepositoryIFaceMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(int64))
	})
	return _c
}

func (_c *ProductRepositoryIFaceMock_GetByID_Call) Return(_a0 *domain.Product, err error) *ProductRepositoryIFaceMock_GetByID_Call {
	_c.Call.Return(_a0, err)
	return _c
}

func (_c *ProductRepositoryIFaceMock_GetByID_Call) RunAndReturn(run func(*app_context.AppContext, int64) (*domain.Product, error)) *ProductRepositoryIFaceMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: appCtx, _a1
func (_m *ProductRepositoryIFaceMock) Save(appCtx *app_context.AppContext, _a1 *domain.Product) error {
	ret := _m.Called(appCtx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *domain.Product) error); ok {
		r0 = rf(appCtx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepositoryIFaceMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ProductRepositoryIFaceMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - _a1 *domain.Product
func (_e *ProductRepositoryIFaceMock_Expecter) Save(appCtx interface{}, _a1 interface{}) *ProductRepositoryIFaceMock_Save_Call {
	return &ProductRepositoryIFaceMock_Save_Call{Call: _e.mock.On("Save", appCtx, _a1)}
}

func (_c *ProductRepositoryIFaceMock_Save_Call) Run(run func(appCtx *app_context.AppContext, _a1 *domain.Product)) *ProductRepositoryIFaceMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*domain.Product))
	})
	return _c
}

func (_c *ProductRepositoryIFaceMock_Save_Call) Return(err error) *ProductRepositoryIFaceMock_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProductRepositoryIFaceMock_Save_Call) RunAndReturn(run func(*app_context.AppContext, *domain.Product) error) *ProductRepositoryIFaceMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByQuantityWithDBTrx provides a mock function with given fields: appCtx, tx, id, quantity
func (_m *ProductRepositoryIFaceMock) UpdateByQuantityWithDBTrx(appCtx *app_context.AppContext, tx *sql.Tx, id int64, quantity int64) error {
	ret := _m.Called(appCtx, tx, id, quantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByQuantityWithDBTrx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *sql.Tx, int64, int64) error); ok {
		r0 = rf(appCtx, tx, id, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByQuantityWithDBTrx'
type ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call struct {
	*mock.Call
}

// UpdateByQuantityWithDBTrx is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - tx *sql.Tx
//   - id int64
//   - quantity int64
func (_e *ProductRepositoryIFaceMock_Expecter) UpdateByQuantityWithDBTrx(appCtx interface{}, tx interface{}, id interface{}, quantity interface{}) *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call {
	return &ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call{Call: _e.mock.On("UpdateByQuantityWithDBTrx", appCtx, tx, id, quantity)}
}

func (_c *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call) Run(run func(appCtx *app_context.AppContext, tx *sql.Tx, id int64, quantity int64)) *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*sql.Tx), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call) Return(err error) *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call) RunAndReturn(run func(*app_context.AppContext, *sql.Tx, int64, int64) error) *ProductRepositoryIFaceMock_UpdateByQuantityWithDBTrx_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepositoryIFaceMock creates a new instance of ProductRepositoryIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepositoryIFaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepositoryIFaceMock {
	mock := &ProductRepositoryIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
