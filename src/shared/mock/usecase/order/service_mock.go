// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/iqbalnzls/watchcommerce/src/dto"
	app_context "github.com/iqbalnzls/watchcommerce/src/shared/app_context"

	mock "github.com/stretchr/testify/mock"
)

// OrderServiceIFaceMock is an autogenerated mock type for the ServiceIFace type
type OrderServiceIFaceMock struct {
	mock.Mock
}

type OrderServiceIFaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderServiceIFaceMock) EXPECT() *OrderServiceIFaceMock_Expecter {
	return &OrderServiceIFaceMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: appCtx, req
func (_m *OrderServiceIFaceMock) Get(appCtx *app_context.AppContext, req *dto.GetOrderRequest) (dto.GetOrderResponse, error) {
	ret := _m.Called(appCtx, req)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 dto.GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *dto.GetOrderRequest) (dto.GetOrderResponse, error)); ok {
		return rf(appCtx, req)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *dto.GetOrderRequest) dto.GetOrderResponse); ok {
		r0 = rf(appCtx, req)
	} else {
		r0 = ret.Get(0).(dto.GetOrderResponse)
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext, *dto.GetOrderRequest) error); ok {
		r1 = rf(appCtx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderServiceIFaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderServiceIFaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - req *dto.GetOrderRequest
func (_e *OrderServiceIFaceMock_Expecter) Get(appCtx interface{}, req interface{}) *OrderServiceIFaceMock_Get_Call {
	return &OrderServiceIFaceMock_Get_Call{Call: _e.mock.On("Get", appCtx, req)}
}

func (_c *OrderServiceIFaceMock_Get_Call) Run(run func(appCtx *app_context.AppContext, req *dto.GetOrderRequest)) *OrderServiceIFaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*dto.GetOrderRequest))
	})
	return _c
}

func (_c *OrderServiceIFaceMock_Get_Call) Return(resp dto.GetOrderResponse, err error) *OrderServiceIFaceMock_Get_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *OrderServiceIFaceMock_Get_Call) RunAndReturn(run func(*app_context.AppContext, *dto.GetOrderRequest) (dto.GetOrderResponse, error)) *OrderServiceIFaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: appCtx, req
func (_m *OrderServiceIFaceMock) Save(appCtx *app_context.AppContext, req *dto.CreateOrderRequest) error {
	ret := _m.Called(appCtx, req)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, *dto.CreateOrderRequest) error); ok {
		r0 = rf(appCtx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderServiceIFaceMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OrderServiceIFaceMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - appCtx *app_context.AppContext
//   - req *dto.CreateOrderRequest
func (_e *OrderServiceIFaceMock_Expecter) Save(appCtx interface{}, req interface{}) *OrderServiceIFaceMock_Save_Call {
	return &OrderServiceIFaceMock_Save_Call{Call: _e.mock.On("Save", appCtx, req)}
}

func (_c *OrderServiceIFaceMock_Save_Call) Run(run func(appCtx *app_context.AppContext, req *dto.CreateOrderRequest)) *OrderServiceIFaceMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app_context.AppContext), args[1].(*dto.CreateOrderRequest))
	})
	return _c
}

func (_c *OrderServiceIFaceMock_Save_Call) Return(err error) *OrderServiceIFaceMock_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderServiceIFaceMock_Save_Call) RunAndReturn(run func(*app_context.AppContext, *dto.CreateOrderRequest) error) *OrderServiceIFaceMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderServiceIFaceMock creates a new instance of OrderServiceIFaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceIFaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceIFaceMock {
	mock := &OrderServiceIFaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
