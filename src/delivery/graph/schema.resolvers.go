package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/iqbalnzls/watchcommerce/src/delivery/graph/model"
	appContext "github.com/iqbalnzls/watchcommerce/src/shared/app_context"
)

// CreateBrand is the resolver for the createBrand field.
func (r *mutationResolver) CreateBrand(ctx context.Context, name string) (resp *model.Brand, err error) {
	appCtx := appContext.ParsingAppContext(ctx)

	req := toCreateBrandRequest(name)

	if err = r.Resolver.v.Validate(req); err != nil {
		return
	}

	if err = r.Resolver.brandService.Save(appCtx, req); err != nil {
		return
	}

	resp = toBrand(name)

	appCtx.Logger.FinishedRequest(resp)

	return
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id int) (resp *model.Product, err error) {
	appCtx := appContext.ParsingAppContext(ctx)

	req := toGetProductRequest(int64(id))
	if err = r.Resolver.v.Validate(req); err != nil {
		return
	}

	product, err := r.Resolver.productService.Get(appCtx, req)
	if err != nil {
		return
	}

	resp = toProduct(product)

	appCtx.Logger.FinishedRequest(resp)

	return
}

// GetProductsByBrandID is the resolver for the getProductsByBrandId field.
func (r *queryResolver) GetProductsByBrandID(ctx context.Context, brandID int) (resp []*model.Product, err error) {
	appCtx := appContext.ParsingAppContext(ctx)

	req := toGetProductByBrandIDRequest(brandID)
	if err = r.Resolver.v.Validate(req); err != nil {
		return
	}

	data, err := r.Resolver.productService.GetByBrandID(appCtx, req)
	if err != nil {
		return
	}

	resp = toProductsBrand(data)

	appCtx.Logger.FinishedRequest(resp)

	return
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
